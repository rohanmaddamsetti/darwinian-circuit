# -*- coding: utf-8 -*-
"""Test-DeLTA2-on-best-focus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sB6zRvK66RNo4Hk3L6dQDNUWctU5Wb-F

This [Colab](https://research.google.com/colaboratory/faq.html) notebook is meant to be used as a quick demonstration of DeLTA's 
capabilities. Use of Google Colab is free, but Google might kill your process if
you use too many resources. We offer 3 approaches to run evaluations for movies 
that we have made available with our software, but you can copy and modify this 
notebook to run on your own data. If you would like to know more check out our
Gitlab repository:

https://gitlab.com/dunloplab/delta

⚠ Important ⚠

Before you get started, make sure you run this notebook with a GPU:
```
Menu > Runtime > Change runtime type
```

# Installation and setup

> *For each code cell below, you will need to run it by clicking the play button (you also can collapse this whole installation section with the down arrow on the left and run it all as one big cell)*


First, download the code and install the environment. Here we are going to do it through pip and use the sources from gitlab because conda takes a very long time to resolve the environment in Colab for some reason:
"""

!git clone https://gitlab.com/dunloplab/delta.git

"""Jia found that we need to add the following code to get the proper versions of Python and python-bioformats to work together:"""

## notes from Jia Lu 4/12/2023
## this fixes the issue — run this code before installing python-bioformats

import os
import sys
sys.path
sys.path.append("/usr/lib/jvm/java-11-openjdk-amd64/bin/")
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64/"
!apt-get install build-essential python3-dev
!apt-get install python3-pil python3-pygraphviz
!apt install openjdk-11-jdk
!pip3 install javabridge --no-cache-dir
!pip3 install python-weka-wrapper3 --no-cache-dir
import weka.core.jvm as jvm
jvm.start()

"""Install the required libraries with pip (+python-bioformats to read nd2s etc):
> *(if the following cell produces an error message about folium and imgaug it can be safely ignored)*
"""

!pip install -r delta/requirements.txt
!pip install python-bioformats

"""Add the delta folder to the python path:"""

import sys
sys.path.append('/content/delta')

"""Import DeLTA:"""

import delta

"""Download latest models:"""

delta.assets.download_assets(
    load_models=True,
    load_sets=False,
    load_evals=False,
    config_level='global'
)

"""Extra imports and misc function definitions:"""

# To download files to your local drive:
from google.colab.files import download as colab_download
from google.colab.files import upload as colab_upload

# To display resuults movies:
from IPython.display import HTML
from base64 import b64encode

def display_movie(filename):
  mp4 = open(filename,'rb').read()
  data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
  return HTML("""
  <video width=600 controls>
        <source src="%s" type="video/mp4">
  </video>
  """ % data_url
  )

"""# Process sequence folder:

Here we will use the private function _download_and_unzip() to retrieve a zipped
image sequence folder, read it with an xpreader object, and process it with the main DeLTA Pipeline:

> *The following example will take about 20 minutes to run. For a shorter demonstration comment ppln.process() and uncomment the last line*
"""

import shutil
import glob

# First load 2D config:
delta.config.load_config(presets='2D')

from google.colab import drive
drive.mount('/content/drive')

# Mount path:
drive_path = '/content/drive/MyDrive'
test_data_dir = '/DeLTA-test-data/'

data_folder = drive_path + test_data_dir

# Path to results folder in your google drive:
results_folder = drive_path + '/DeLTA-test-results/best-focus-results/' # This folder must exist

import shutil
import glob

# copy file to local disk to avoid i/o problems:
local_data_folder = "/content/local-DeLTA-test-data/"
shutil.copytree(data_folder, local_data_folder)

# Init xpreader:
# (make sure you update prototype parameters if you use your own movie)

reader = delta.utilities.xpreader(
    local_data_folder,
    prototype="organizedbestfocus/XY%02dT%04d.tif",
    fileorder='pt'
)

# Print experiment parameters to make sure it initialized properly:
print("""Initialized experiment reader:
    - %d positions
    - %d imaging channels
    - %d timepoints"""%(reader.positions, reader.channels, reader.timepoints)
)

# Init Pipeline:
ppln = delta.pipeline.Pipeline(reader)

ppln.process()
# Run a subset of frames so that I don't run out of RAM!:
#ppln.process(frames=list(range(39)))

# Display output movie:
display_movie(ppln.resfolder / "Position000000.mp4")

# copy output files to drive:
for res_file in glob.glob(str(ppln.resfolder) + '/*'):
  shutil.copy(res_file, results_folder)